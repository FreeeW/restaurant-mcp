// Add this to the api.ts file after the DailyKPI interface

export interface EnhancedDailyKPI extends DailyKPI {
  // Original daily purchase data
  actual_purchases?: number
  
  // Rolling average data (more accurate)
  rolling_cmv_percentage: number
  rolling_period_days: number
  
  // Theoretical values based on rolling average
  theoretical_food_cost: number
  
  // Indicators
  is_purchase_day: boolean
  cmv_variance?: number
}

// Add these methods to the api object in api.ts:

  // Enhanced KPI with rolling CMV
  getDailyKPIEnhanced: async (
    ownerId: string, 
    date: string,
    rollingDays: number = 30
  ): Promise<EnhancedDailyKPI | null> => {
    // First get the regular daily KPI
    const basicKPI = await api.getDailyKPI(ownerId, date)
    
    if (!basicKPI) {
      // If no basic KPI, still try to get rolling data
      const { data: rollingData, error } = await supabase
        .rpc('get_rolling_cmv', {
          p_owner_id: ownerId,
          p_date: date,
          p_days: rollingDays
        })
      
      if (error || !rollingData?.[0]) {
        return null
      }
      
      const rolling = rollingData[0]
      
      // Create a minimal KPI with rolling data
      return {
        date: date,
        sales: rolling.daily_sales || 0,
        orders: 0,
        average_ticket: 0,
        food_cost: rolling.theoretical_daily_food_cost || 0,
        food_cost_percentage: rolling.rolling_cmv_percentage || 0,
        labor_cost: 0,
        labor_cost_percentage: 0,
        profit: 0,
        profit_margin: 0,
        actual_purchases: rolling.daily_purchases || 0,
        rolling_cmv_percentage: rolling.rolling_cmv_percentage || 0,
        rolling_period_days: rollingDays,
        theoretical_food_cost: rolling.theoretical_daily_food_cost || 0,
        is_purchase_day: (rolling.daily_purchases || 0) > 0,
        cmv_variance: rolling.daily_purchases - rolling.theoretical_daily_food_cost
      }
    }
    
    // Get rolling CMV data
    const { data: rollingData, error } = await supabase
      .rpc('get_rolling_cmv', {
        p_owner_id: ownerId,
        p_date: date,
        p_days: rollingDays
      })
    
    if (error) {
      console.error('Error fetching rolling CMV:', error)
      // Return basic KPI with estimates if rolling fails
      return {
        ...basicKPI,
        actual_purchases: 0,
        rolling_cmv_percentage: basicKPI.food_cost_percentage,
        rolling_period_days: rollingDays,
        theoretical_food_cost: basicKPI.food_cost,
        is_purchase_day: false,
        cmv_variance: 0
      }
    }
    
    const rolling = rollingData?.[0]
    
    return {
      ...basicKPI,
      actual_purchases: rolling?.daily_purchases || 0,
      rolling_cmv_percentage: rolling?.rolling_cmv_percentage || basicKPI.food_cost_percentage,
      rolling_period_days: rollingDays,
      theoretical_food_cost: rolling?.theoretical_daily_food_cost || basicKPI.food_cost,
      is_purchase_day: (rolling?.daily_purchases || 0) > 0,
      cmv_variance: rolling ? 
        (rolling.daily_purchases - rolling.theoretical_daily_food_cost) : 
        0
    }
  },
